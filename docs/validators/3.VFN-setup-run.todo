---
title: "VFN-setup-run"
sidebar_label: 'VFN-setup-run'
sidebar_position: 7
---

# **VFN Node setup**

Note:
**We strongly suggest that all Validators also run a VFN Node, which is a node that serves as crucial counterpart to completing the design of our network. The VFN Node is how the public network is able to reach the Validator, which should not be done directly.**


## Ports
As You should know from [Validator Node setup] (/validators/2.Validator-setup), the following ports must be open: `6181`, `6182`, `8080`.

- `6181` is for the VFN Node, it should only allow traffic from the Validator Node IP address.
- `6182` is for the the public fullnode network. This is how the public nodes that will be serving JSON-RPC on the network will receive data and submit transactions to the network.
- `8080` is the RPC port and we suggest VFN Nodes and public fullnodes to serve this port by default for operability.

## **Setting up a VFN Node**

These instructions target **Ubuntu 22.04**.

### 1. Set up an Ubuntu host with `ssh` access, e.g. in a cloud service provider.

### 2. Associate a static IP with your host, this will be tied to you account. This address will be shared on the chain, so that other nodes will be able to find you through the peer discovery mechanism. Libra binaries should be run in a linux user that has **very narrow permissions**. Before you can create binaries you'll need some tools installed probably by `sudo` and likely in root - see point 4 and onwards.

### 3. Use `tmux` to persist the terminal session for build, as well as for running the nodes and tower app. Also this setup requires `git` and `make`, which might be installed already on your host. If not, perform the following steps now:

```bash
sudo apt update
sudo apt install -y git tmux jq build-essential cmake clang llvm libgmp-dev pkg-config libssl-dev lld libpq-dev
```

### 4. Install Rust:

```bash
curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y

# restart your bash instance to pickup the cargo paths

source ~/.bashrc
```

### 5. Create Binaries:

It is recommended to perform thesteps from this point onwards inside tmux. Short tmux instruction:

#### 5.1. Start a new [tmux](#tmux-basics) session:

```bash
# start a new tmux session
tmux new -t libra-vfn-setup
```

TMUX basics:
1. New session: `tmux new -t <SESSION_NAME>`
2. Detach from Session: press Ctrl-b and then d
3. rejoin unnamed session, if only one session exists: `tmux a`
4. rejoin unnamed session by id: `tmux ls` to get the ID and then `tmux a -t <SESSION_ID>`
5. rejoin named session: `tmux a -t <SESSION_NAME>`
6. kill session: attach to the session --> press Ctrl-b, then type `:kill-session` and press ENTER

You can read more about tmux commands [here]: (https://github.com/tmux/tmux/wiki/Getting-Started).

#### 5.2. Cleanup:

Previous clones and testnets leave data in the `.libra` directory, clean those up by removing these directories

``` bash
rm -rf ~/libra-framework
rm -rf ~/.libra/data && rm -rf ~/.libra/genesis && rm -rf ~/.libra/secure-data.json
rm -f /usr/bin/libra && rm -rf /usr/local/bin/libra && rm -f ~/.cargo/bin/libra
```
#### 5.3. Clone this repo:

```
cd ~
git clone https://github.com/0LNetworkCommunity/libra-framework

# go to libra-framework directory

cd ~/libra-framework
```

#### 5.4. Build the source and install binaries:

``` bash
cargo build --release -p libra -p diem-db-tool -p diem
```

Ensure your are still inside the `tmux` session to avoid your session gets disconnected.

### 6. Make the `libra` binary globally executable and persistent by copying libra binaries to cargo bins path:

:::note
This assumes the `libra` binary is already built and located at `~/libra-framework/target/release/libra`.
:::
```bash
sudo cp -f ~/libra-framework/target/release/libra* ~/.cargo/bin/
```

### 7. VFN Node initialization

#### 7.1. Initialize `~/.libra` config directory:
 
``` bash
libra config init
```

#### 7.2. Grab the **genesis blob** and **waypoint** (creates `fullnode.yaml` not used here)

``` bash
libra config fullnode-init
```

:::warning
Until a patch is published to pull correctly from the `epoch-archive-mainnet` repo, the `genesis.blob` and `waypoint.txt` will be wrong if you are using `libra config fullnode-init`.
In order to fix this, after you have run the above command, please run:
- `wget https://raw.githubusercontent.com/0LNetworkCommunity/epoch-archive-mainnet/main/upgrades/v6.9.0/genesis.blob -O ~/.libra/genesis/genesis.blob`
- `wget https://raw.githubusercontent.com/0LNetworkCommunity/epoch-archive-mainnet/main/upgrades/v6.9.0/waypoint.txt -O ~/.libra/genesis/waypoint.txt`
:::

#### 7.3. Set your client `libra.yaml` with the rpc-load-balancer upstream node:

``` bash
libra config fix --force-url https://rpc.openlibra.space:8080
```

:::info
If you notice problems getting transactions through, or when the RPC Load Balancer is down, you can adjust the url to `"http://localhost:8080/"` in `~/.libra/libra.yaml`
:::

#### 7.4. Configure your VFN using the validator config tool:

``` bash
libra config validator-init --vfn
```

:::warning
Due to a bug currently in `libra config validator-init`, please run this command again without the `--vfn` parameter
:::

The VFN config will then be automatically created here:

``` bash
cat ~/.libra/vfn.yaml
```

**This is what your VFN `full_node_networks` section should look like:**
``` yaml
full_node_networks:
- network_id:
    private: 'vfn'
  discovery_method: 'onchain'
  listen_address: '/ip4/0.0.0.0/tcp/6181'
  seeds:
    <your_validator_publickey>:
      addresses:
      - '/ip4/<validator_ip>/tcp/6181/noise-ik/<0x_your_validator_publickey>/handshake/0'
      role: 'Validator'
- network_id: 'public'
  discovery_method: 'onchain'
  listen_address: '/ip4/0.0.0.0/tcp/6182'
  identity:
    type: 'from_file'
    path: '/home/<your_user>/.libra/validator-full-node-identity.yaml'
```

:::Note:
Your VFN will use your validator as an upstream without an identity, while the public network will use the identity file.
::: 

#### 7.5. Issue the On-Chain Configuration:

##### 7.5.1. From your VFN Node, take note of the public IPv4 address:

``` bash
curl ipinfo.io
```

##### 7.5.2. Take note of your `full_node_network_public_key`:

``` bash
grep full_node_network_public_key ~/.libra/public-keys.yaml

# example: full_node_network_public_key: "0x_full_node_network_public_key"
```

***On both machines, the config in `operator.yaml` should be complete with separate Validator Node and VFN Node keys and IPs.***

``` yaml
validator_network_public_key: "0xthiswasalreadysetpublickey"
validator_host:
  host: <validator_ip>
  port: 6180
full_node_network_public_key: "0x_full_node_network_public_key"
full_node_host:
  host: <vfn_ip>
  port: 6182
```

##### 7.5.3. On your Validator Node, update the on-chain config for the Validator Node/VFN Node (do this just once):

``` bash
libra txs validator update

Enter your 0L mnemonic:
ðŸ”‘
transaction success  Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â· âœ“
```

Wait (up until one epoch) and then check the on-chain values to confirm:

``` bash
libra query val-config 0xabc4321yourvalidatoraccount | jq
```

## Run the VFN Node

In a tmux, run the following command:

`libra node --config-path ~/.libra/vfn.yaml`








