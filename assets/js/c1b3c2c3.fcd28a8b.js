"use strict";(self.webpackChunk_0_l_documentation=self.webpackChunk_0_l_documentation||[]).push([[453],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=s,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||r;return t?a.createElement(g,o(o({ref:n},d),{},{components:t})):a.createElement(g,o({ref:n},d))}));function g(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,o=new Array(r);o[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:s,o[1]=i;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4246:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=t(7462),s=(t(7294),t(3905));const r={title:"Move",id:"index",hidden:!0},o=void 0,i={unversionedId:"Tools/move/index",id:"Tools/move/index",title:"Move",description:"This page is a work in progress and may contain false information",source:"@site/docs/Tools/move/index.md",sourceDirName:"Tools/move",slug:"/Tools/move/",permalink:"/documentation/Tools/move/",draft:!1,editUrl:"https://github.com/0LNetworkCommunity/documentation/edit/main/docs/Tools/move/index.md",tags:[],version:"current",frontMatter:{title:"Move",id:"index",hidden:!0},sidebar:"tutorialSidebar",previous:{title:"Wallet",permalink:"/documentation/Tools/wallet"},next:{title:"Node",permalink:"/documentation/Tools/node/"}},l={},c=[{value:"Description",id:"description",level:2},{value:"Compliling",id:"compliling",level:3},{value:"Compiling and unit testing Move",id:"compiling-and-unit-testing-move",level:2},{value:"Generating test coverage details for Move",id:"generating-test-coverage-details-for-move",level:2},{value:"Proving Move",id:"proving-move",level:2},{value:"Profiling gas usage",id:"profiling-gas-usage",level:2},{value:"Debugging and printing stack trace",id:"debugging-and-printing-stack-trace",level:2},{value:"Publishing a Move package with a named address",id:"publishing-a-move-package-with-a-named-address",level:2},{value:"Running a Move function",id:"running-a-move-function",level:2},{value:"Arguments in JSON",id:"arguments-in-json",level:2},{value:"Package info",id:"package-info",level:3},{value:"Deploying the package",id:"deploying-the-package",level:3},{value:"Entry functions",id:"entry-functions",level:3},{value:"View functions",id:"view-functions",level:3},{value:"Script functions",id:"script-functions",level:3}],d={toc:c},u="wrapper";function p(e){let{components:n,...t}=e;return(0,s.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("admonition",{title:"WIP",type:"danger"},(0,s.kt)("p",{parentName:"admonition"},"This page is a work in progress and may contain false information")),(0,s.kt)("h1",{id:"txs---move"},"Txs - Move"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"The Move CLI is a vendor package and original documentation can be found ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/0LNetworkCommunity/diem/tree/release/third_party/move/tools/move-cli"},"here"))),(0,s.kt)("h2",{id:"description"},"Description"),(0,s.kt)("p",null,"The Move command-line interface (Move CLI) is a tool that provides an easy way to interact with Move, to experiment\nwith writing and running Move code, and to experiment with developing new tools useful\nfor Move development. To reflect this, the Move CLI commands are grouped into\nthree main subcommands:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"package commands"),": are commands to create, compile, and test Move packages, as well as perform other operations related to packages. These do not rely on a Move Adapter implementation nor an implementation of storage."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"sandbox commands"),": are commands that allow you to write Move modules and scripts, write and run scripts and tests, and view the resulting state of execution in a local sandboxed environment."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"experimental commands"),": are experimental commands that are currently in development.")),(0,s.kt)("p",null,"Every Move CLI command, with the exception of ",(0,s.kt)("inlineCode",{parentName:"p"},"package create"),", is expected to be run within the context of a ",(0,s.kt)("a",{parentName:"p",href:"https://move-language.github.io/move/packages.html"},"Move package"),"."),(0,s.kt)("h3",{id:"compliling"},"Compliling"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"libra")," CLI can be used to compile a Move package locally."),(0,s.kt)("p",null,"The named addresses can be either an account address, or a profile name."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# TODO: $ libra move compile --package-dir aptos-move/move-examples/hello_blockchain/ --named-addresses hello_blockchain=superuser\n")),(0,s.kt)("p",null,"The above command will generate the below terminal output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "Result": [\n    "742854F7DCA56EA6309B51E8CEBB830B12623F9C9D76C72C3242E4CAD353DEDC::Message"\n  ]\n}\n')),(0,s.kt)("h2",{id:"compiling-and-unit-testing-move"},"Compiling and unit testing Move"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"libra")," CLI can also be used to compile and run unit tests locally.\nIn this example, we'll use the ",(0,s.kt)("inlineCode",{parentName:"p"},"HelloBlockchain")," in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/aptos-labs/aptos-core/tree/main/aptos-move/move-examples"},"move-examples"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"#TODO: $ libra move test --package-dir aptos-move/move-examples/hello_blockchain/ --named-addresses hello_blockchain=superuser\n")),(0,s.kt)("p",null,"The above command will generate the following terminal output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'INCLUDING DEPENDENCY DiemFramework\nINCLUDING DEPENDENCY DiemsStdlib\nINCLUDING DEPENDENCY DiemStdlib\nBUILDING Examples\nRunning Move unit tests\n[ PASS    ] 0x742854f7dca56ea6309b51e8cebb830b12623f9c9d76c72c3242e4cad353dedc::MessageTests::sender_can_set_message\n[ PASS    ] 0x742854f7dca56ea6309b51e8cebb830b12623f9c9d76c72c3242e4cad353dedc::Message::sender_can_set_message\nTest result: OK. Total tests: 2; passed: 2; failed: 0\n{\n  "Result": "Success"\n}\n')),(0,s.kt)("h2",{id:"generating-test-coverage-details-for-move"},"Generating test coverage details for Move"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"libra")," CLI can be used to analyze and improve the testing of your Move modules. To use this feature:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"In your ",(0,s.kt)("inlineCode",{parentName:"p"},"libra")," source checkout, navigate to the ",(0,s.kt)("inlineCode",{parentName:"p"},"libra-framework/framework/move-stdlib")," directory.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Execute the command:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ libra move test --coverage\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Receive results in standard output containing the result for each test case followed by a basic coverage summary resembling:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'BUILDING MoveStdlib\nRunning Move unit tests\n[ PASS    ] 0x1::vector_tests::append_empties_is_empty\n[ PASS    ] 0x1::option_tests::borrow_mut_none\n[ PASS    ] 0x1::fixed_point32_tests::ceil_can_round_up_correctly\n[ PASS    ] 0x1::features::test_change_feature_txn\n[ PASS    ] 0x1::bcs_tests::bcs_bool\n[ PASS    ] 0x1::bit_vector_tests::empty_bitvector\n[ PASS    ] 0x1::option_tests::borrow_mut_some\nTest result: OK. Total tests: 149; passed: 149; failed: 0\n+-------------------------+\n| Move Coverage Summary   |\n+-------------------------+\nModule 0000000000000000000000000000000000000000000000000000000000000001::bcs\n>>> % Module coverage: NaN\nModule 0000000000000000000000000000000000000000000000000000000000000001::fixed_point32\n>>> % Module coverage: 100.00\nModule 0000000000000000000000000000000000000000000000000000000000000001::hash\n>>> % Module coverage: NaN\nModule 0000000000000000000000000000000000000000000000000000000000000001::vector\n>>> % Module coverage: 92.19\nModule 0000000000000000000000000000000000000000000000000000000000000001::error\n>>> % Module coverage: 0.00\nModule 0000000000000000000000000000000000000000000000000000000000000001::acl\n>>> % Module coverage: 0.00\nModule 0000000000000000000000000000000000000000000000000000000000000001::bit_vector\n>>> % Module coverage: 97.32\nModule 0000000000000000000000000000000000000000000000000000000000000001::signer\n>>> % Module coverage: 100.00\nModule 0000000000000000000000000000000000000000000000000000000000000001::features\n>>> % Module coverage: 69.41\nModule 0000000000000000000000000000000000000000000000000000000000000001::option\n>>> % Module coverage: 100.00\nModule 0000000000000000000000000000000000000000000000000000000000000001::string\n>>> % Module coverage: 81.82\n+-------------------------+\n| % Move Coverage: 83.50  |\n+-------------------------+\nPlease use `libra move coverage -h` for more detailed test coverage of this package\n{\n"Result": "Success"\n}\n'))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Optionally, narrow down your test runs and results to a specific package name with the ",(0,s.kt)("inlineCode",{parentName:"p"},"--filter")," option, like so:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ libra move test --coverage --filter vector\n")),(0,s.kt)("p",{parentName:"li"},"With results like:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre"},"BUILDING MoveStdlib\nRunning Move unit tests\n[ PASS    ] 0x1::bit_vector_tests::empty_bitvector\n[ PASS    ] 0x1::vector_tests::append_empties_is_empty\n[ PASS    ] 0x1::bit_vector_tests::index_bit_out_of_bounds\n[ PASS    ] 0x1::vector_tests::append_respects_order_empty_lhs\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Run the ",(0,s.kt)("inlineCode",{parentName:"p"},"libra move coverage")," command to obtain more detailed coverage information.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Optionally, isolate the results to a module by passing its name to the ",(0,s.kt)("inlineCode",{parentName:"p"},"--module")," option, for example:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ libra move coverage source --module signer\n")),(0,s.kt)("p",{parentName:"li"},"   With results:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre"},'module std::signer {\n    // Borrows the address of the signer\n    // Conceptually, you can think of the `signer` as being a struct wrapper arround an\n    // address\n    // ```\n    // struct signer has drop { addr: address }\n    // ```\n    // `borrow_address` borrows this inner field\n    native public fun borrow_address(s: &signer): &address;\n\n    // Copies the address of the signer\n    public fun address_of(s: &signer): address {\n        *borrow_address(s)\n    }\n\n /// Return true only if `s` is a transaction signer. This is a spec function only available in spec.\n spec native fun is_txn_signer(s: signer): bool;\n\n /// Return true only if `a` is a transaction signer address. This is a spec function only available in spec.\n spec native fun is_txn_signer_addr(a: address): bool;\n}\n{\n"Result": "Success"\n}\n'))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Find failures and iteratively improve your testing and running these commands to eliminate gaps in your testing coverage."))),(0,s.kt)("h2",{id:"proving-move"},"Proving Move"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"\x3c!-- TODO: libra move prove --package-dir aptos-move/move-examples/hello_prover/ --\x3e\n")),(0,s.kt)("p",null,"The above command will generate the following terminal output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'SUCCESS proving 1 modules from package `hello_prover` in 1.649s\n{\n  "Result": "Success"\n}\n')),(0,s.kt)("p",null,"Move Prover may fail with the following terminal output if the dependencies are not installed and set up properly:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'FAILURE proving 1 modules from package `hello_prover` in 0.067s\n{\n  "Error": "Move Prover failed: No boogie executable set.  Please set BOOGIE_EXE"\n}\n')),(0,s.kt)("h2",{id:"profiling-gas-usage"},"Profiling gas usage"),(0,s.kt)("p",null,"Run the gas profiler by appending the ",(0,s.kt)("inlineCode",{parentName:"p"},"--profile-gas")," option to the Libra CLI ",(0,s.kt)("inlineCode",{parentName:"p"},"move publish"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"move run")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"move run-script")," command, for example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"libra move publish --profile-gas\n")),(0,s.kt)("p",null,"And receive output resembling:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'Compiling, may take a little while to download git dependencies...\nBUILDING empty_fun\npackage size 427 bytes\nSimulating transaction locally with the gas profiler...\nThis is still experimental so results may be inaccurate.\nExecution & IO Gas flamegraph saved to gas-profiling/txn-69e19ee4-0x1-code-publish_package_txn.exec_io.svg\nStorage fee flamegraph saved to gas-profiling/txn-69e19ee4-0x1-code-publish_package_txn.storage.svg\n{\n  "Result": {\n    "transaction_hash": "0x69e19ee4cc89cb1f84ee21a46e6b281bd8696115aa332275eca38c4857818dfe",\n    "gas_used": 1007,\n    "gas_unit_price": 100,\n    "sender": "dbcbe741d003a7369d87ec8717afb5df425977106497052f96f4e236372f7dd5",\n    "success": true,\n    "version": 473269362,\n    "vm_status": "status EXECUTED of type Execution"\n  }\n}\n')),(0,s.kt)("p",null,"Find the flame graphs in the newly created ",(0,s.kt)("inlineCode",{parentName:"p"},"gas-profiling/")," directory. To interact with a graph, open the file in a web browser."),(0,s.kt)("p",null,"Note these limitations of the experimental gas profiling feature:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"It may produce results that are different from the simulation."),(0,s.kt)("li",{parentName:"ul"},"The graphs may contain errors, and the numbers may not add up to the total gas cost as shown in the transaction output.")),(0,s.kt)("h2",{id:"debugging-and-printing-stack-trace"},"Debugging and printing stack trace"),(0,s.kt)("p",null,"You can run the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# $ libra move test --package-dir crates/aptos/debug-move-example\n")),(0,s.kt)("p",null,"The command will generate the following output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"Running Move unit tests\n[debug] 0000000000000000000000000000000000000000000000000000000000000001\nCall Stack:\n    [0] 0000000000000000000000000000000000000000000000000000000000000001::Message::sender_can_set_message\n\n        Code:\n            [4] CallGeneric(0)\n            [5] MoveLoc(0)\n            [6] LdConst(0)\n          > [7] Call(1)\n            [8] Ret\n\n        Locals:\n            [0] -\n            [1] 0000000000000000000000000000000000000000000000000000000000000001\n\n\nOperand Stack:\n")),(0,s.kt)("h2",{id:"publishing-a-move-package-with-a-named-address"},"Publishing a Move package with a named address"),(0,s.kt)("p",null,"Publish the package with your account address set for ",(0,s.kt)("inlineCode",{parentName:"p"},"HelloBlockchain"),"."),(0,s.kt)("p",null,"Here, you need to change 8946741e5c907c43c9e042b3739993f32904723f8e2d1491564d38959b59ac71 to your account address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ libra move publish --package-dir aptos-move/move-examples/hello_blockchain/ --named-addresses hello_blockchain=8946741e5c907c43c9e042b3739993f32904723f8e2d1491564d38959b59ac71\n")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"As an open source project, the source code as well as compiled code published to the Libra blockchain is inherently open by default. This means code you upload may be downloaded from on-chain data. Even without source access, it is possible to regenerate Move source from Move bytecode. To disable source access, publish with the ",(0,s.kt)("inlineCode",{parentName:"p"},"--included-artifacts none")," argument, like so:"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre"},"libra move publish --included-artifacts none\n"))),(0,s.kt)("p",null,"You can additionally use named profiles for the addresses.  The first placeholder is ",(0,s.kt)("inlineCode",{parentName:"p"},"default")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# TODO: $ libra move publish --package-dir aptos-move/move-examples/hello_blockchain/ --named-addresses hello_blockchain=default\n")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"When publishing Move modules, if multiple modules are in one package, then all the modules in this package must have the same account. If they have different accounts, then the publishing will fail at the transaction level.")),(0,s.kt)("h2",{id:"running-a-move-function"},"Running a Move function"),(0,s.kt)("p",null,"Now that you've published the function above, you can run it."),(0,s.kt)("p",null,"Arguments must be given a type with a colon to separate it.  In this example, we want the input to be\nparsed as a string, so we put ",(0,s.kt)("inlineCode",{parentName:"p"},"string:Hello!"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'$ libra move run --function-id 0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb::message::set_message --args string:hello!\n{\n  "Result": {\n    "changes": [\n      {\n        "address": "b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n        "data": {\n          "authentication_key": "0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n          "self_address": "0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n          "sequence_number": "3"\n        },\n        "event": "write_resource",\n        "resource": "0x1::account::Account"\n      },\n      {\n        "address": "b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n        "data": {\n          "coin": {\n            "value": "9777"\n          },\n          "deposit_events": {\n            "counter": "1",\n            "guid": {\n              "id": {\n                "addr": "0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n                "creation_num": "1"\n              }\n            }\n          },\n          "withdraw_events": {\n            "counter": "1",\n            "guid": {\n              "id": {\n                "addr": "0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n                "creation_num": "2"\n              }\n            }\n          }\n        },\n        "event": "write_resource",\n        TODO: "resource": "0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>"\n      },\n      {\n        "address": "b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n        "data": {\n          "counter": "4"\n        },\n        "event": "write_resource",\n        "resource": "0x1::guid::Generator"\n      },\n      {\n        "address": "b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n        "data": {\n          "message": "hello!",\n          "message_change_events": {\n            "counter": "0",\n            "guid": {\n              "id": {\n                "addr": "0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n                "creation_num": "3"\n              }\n            }\n          }\n        },\n        "event": "write_resource",\n        "resource": "0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb::Message::MessageHolder"\n      }\n    ],\n    "gas_used": 41,\n    "success": true,\n    "version": 3488,\n    "vm_status": "Executed successfully"\n  }\n}\n')),(0,s.kt)("p",null,"Additionally, profiles can replace addresses in the function id."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'$ libra move run --function-id default::message::set_message --args string:hello!\n{\n  "Result": {\n    "changes": [\n      {\n        "address": "b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n        "data": {\n          "authentication_key": "0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n          "self_address": "0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n          "sequence_number": "3"\n        },\n        "event": "write_resource",\n        "resource": "0x1::account::Account"\n      },\n      {\n        "address": "b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n        "data": {\n          "coin": {\n            "value": "9777"\n          },\n          "deposit_events": {\n            "counter": "1",\n            "guid": {\n              "id": {\n                "addr": "0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n                "creation_num": "1"\n              }\n            }\n          },\n          "withdraw_events": {\n            "counter": "1",\n            "guid": {\n              "id": {\n                "addr": "0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n                "creation_num": "2"\n              }\n            }\n          }\n        },\n        "event": "write_resource",\n        TODO: "resource": "0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>"\n      },\n      {\n        "address": "b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n        "data": {\n          "counter": "4"\n        },\n        "event": "write_resource",\n        "resource": "0x1::guid::Generator"\n      },\n      {\n        "address": "b9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n        "data": {\n          "message": "hello!",\n          "message_change_events": {\n            "counter": "0",\n            "guid": {\n              "id": {\n                "addr": "0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb",\n                "creation_num": "3"\n              }\n            }\n          }\n        },\n        "event": "write_resource",\n        "resource": "0xb9bd2cfa58ca29bce1d7add25fce5c62220604cd0236fe3f90d9de91ed9fb8cb::Message::MessageHolder"\n      }\n    ],\n    "gas_used": 41,\n    "success": true,\n    "version": 3488,\n    "vm_status": "Executed successfully"\n  }\n}\n')),(0,s.kt)("h2",{id:"arguments-in-json"},"Arguments in JSON"),(0,s.kt)("h3",{id:"package-info"},"Package info"),(0,s.kt)("p",null,"Here, the package is deployed under the named address ",(0,s.kt)("inlineCode",{parentName:"p"},"test_account"),"."),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# TODO: cd <aptos-core-parent-directory>/aptos-core/aptos-move/move-examples/cli_args\n"))),(0,s.kt)("h3",{id:"deploying-the-package"},"Deploying the package"),(0,s.kt)("p",null,"Start by mining a vanity address for Ace, who will deploy the package:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=Command",title:"Command"},"aptos key generate \\\n    --vanity-prefix 0xace \\\n    --output-file ace.key\n")),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "Result": {\n    "Account Address:": "0xacef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46",\n    "PublicKey Path": "ace.key.pub",\n    "PrivateKey Path": "ace.key"\n  }\n}\n'))),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"The exact account address should vary for each run, though the vanity prefix should not.")),(0,s.kt)("p",null,"Store Ace's address in a shell variable so you can call it inline later on:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# Your exact address should vary\nace_addr=0xacef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46\n")),(0,s.kt)("p",null,"Fund Ace's account with the faucet (either devnet or testnet):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=Command",title:"Command"},"aptos account fund-with-faucet --account $ace_addr\n")),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "Result": "Added 100000000 Octas to account acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46"\n}\n'))),(0,s.kt)("p",null,"Now publish the package under Ace's account:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=Command",title:"Command"},"libra move publish \\\n    --named-addresses test_account=$ace_addr \\\n    --private-key-file ace.key \\\n    --assume-yes\n")),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "Result": {\n    "transaction_hash": "0x1d7b074dd95724c5459a1c30fe4cb3875e7b0478cc90c87c8e3f21381625bec1",\n    "gas_used": 1294,\n    "gas_unit_price": 100,\n    "sender": "acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46",\n    "sequence_number": 0,\n    "success": true,\n    "timestamp_us": 1685077849297587,\n    "version": 528422121,\n    "vm_status": "Executed successfully"\n  }\n}\n'))),(0,s.kt)("h3",{id:"entry-functions"},"Entry functions"),(0,s.kt)("p",null,"The only module in the package, ",(0,s.kt)("inlineCode",{parentName:"p"},"cli_args.move"),", defines a simple ",(0,s.kt)("inlineCode",{parentName:"p"},"Holder")," resource with fields of various data types:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="Holder in cli_args.move"',title:'"Holder',in:!0,'cli_args.move"':!0},":!: static/move-examples/cli_args/sources/cli_args.move resource\n")),(0,s.kt)("p",null,"A public entry function with multi-nested vectors can be used to set the fields:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="Setter function in cli_args.move"',title:'"Setter',function:!0,in:!0,'cli_args.move"':!0},":!: static/move-examples/cli_args/sources/cli_args.move setter\n")),(0,s.kt)("p",null,"After the package has been published, ",(0,s.kt)("inlineCode",{parentName:"p"},"libra move run")," can be used to call ",(0,s.kt)("inlineCode",{parentName:"p"},"set_vals()"),":"),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"To pass vectors (including nested vectors) as arguments from the command line, use JSON syntax escaped with quotes!")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Running function with nested vector arguments from CLI"',title:'"Running',function:!0,with:!0,nested:!0,vector:!0,arguments:!0,from:!0,'CLI"':!0},'libra move run \\\n    --function-id $ace_addr::cli_args::set_vals \\\n    --type-args \\\n        0x1::account::Account \\\n        0x1::chain_id::ChainId \\\n    --args \\\n        u8:123 \\\n        "bool:[false, true, false, false]" \\\n        \'address:[["0xace", "0xbee"], ["0xcad"], []]\' \\\n    --private-key-file ace.key \\\n    --assume-yes\n')),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "Result": {\n    "transaction_hash": "0x5e141dc6c28e86fa9f5594de93d07a014264ebadfb99be6db922a929eb1da24f",\n    "gas_used": 504,\n    "gas_unit_price": 100,\n    "sender": "acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46",\n    "sequence_number": 1,\n    "success": true,\n    "timestamp_us": 1685077888820037,\n    "version": 528422422,\n    "vm_status": "Executed successfully"\n  }\n}\n'))),(0,s.kt)("p",null,"The function ID, type arguments, and arguments can alternatively be specified in a JSON file:"),(0,s.kt)("p",null,"Here, the call to ",(0,s.kt)("inlineCode",{parentName:"p"},"libra move run")," looks like:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Running function with JSON input file"',title:'"Running',function:!0,with:!0,JSON:!0,input:!0,'file"':!0},"libra move run \\\n    --json-file entry_function_arguments.json \\\n    --private-key-file ace.key \\\n    --assume-yes\n")),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "Result": {\n    "transaction_hash": "0x60a32315bb48bf6d31629332f6b1a3471dd0cb016fdee8d0bb7dcd0be9833e60",\n    "gas_used": 3,\n    "gas_unit_price": 100,\n    "sender": "acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46",\n    "sequence_number": 2,\n    "success": true,\n    "timestamp_us": 1685077961499641,\n    "version": 528422965,\n    "vm_status": "Executed successfully"\n  }\n}\n'))),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"If you are trying to run the example yourself don't forget to substitute Ace's actual address for ",(0,s.kt)("inlineCode",{parentName:"p"},"<test_account>")," in ",(0,s.kt)("inlineCode",{parentName:"p"},"entry_function_arguments.json"),"!")),(0,s.kt)("h3",{id:"view-functions"},"View functions"),(0,s.kt)("p",null,"Once the values in a ",(0,s.kt)("inlineCode",{parentName:"p"},"Holder")," have been set, the ",(0,s.kt)("inlineCode",{parentName:"p"},"reveal()")," view function can be used to check the first three fields, and to compare type arguments against the last two fields:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="View function"',title:'"View','function"':!0},":!: static/move-examples/cli_args/sources/cli_args.move view\n")),(0,s.kt)("p",null,"This view function can be called with arguments specified either from the CLI or from a JSON file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Arguments via CLI"',title:'"Arguments',via:!0,'CLI"':!0},"libra move view \\\n    --function-id $ace_addr::cli_args::reveal \\\n    --type-args \\\n        0x1::account::Account \\\n        0x1::account::Account \\\n    --args address:$ace_addr\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Arguments via JSON file"',title:'"Arguments',via:!0,JSON:!0,'file"':!0},"libra move view --json-file view_function_arguments.json\n")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"If you are trying to run the example yourself don't forget to substitute Ace's actual address for ",(0,s.kt)("inlineCode",{parentName:"p"},"<test_account>")," in ",(0,s.kt)("inlineCode",{parentName:"p"},"view_function_arguments.json")," (twice)!")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Output"',title:'"Output"'},'{\n  "Result": [\n    {\n      "address_vec_vec": [\n        [\n          "0xace",\n          "0xbee"\n        ],\n        [\n          "0xcad"\n        ],\n        []\n      ],\n      "bool_vec": [\n        false,\n        true,\n        false,\n        false\n      ],\n      "type_info_1_match": true,\n      "type_info_2_match": false,\n      "u8_solo": 123\n    }\n  ]\n}\n')),(0,s.kt)("h3",{id:"script-functions"},"Script functions"),(0,s.kt)("p",null,"The package also contains a script, ",(0,s.kt)("inlineCode",{parentName:"p"},"set_vals.move"),", which is a wrapper for the setter function:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="script"',title:'"script"'},":!: static/move-examples/cli_args/scripts/set_vals.move script\n")),(0,s.kt)("p",null,"First compile the package (this will compile the script):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=Compilation",title:"Compilation"},"libra move compile --named-addresses test_account=$ace_addr\n")),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "Result": [\n    "acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46::cli_args"\n  ]\n}\n'))),(0,s.kt)("p",null,"Next, run ",(0,s.kt)("inlineCode",{parentName:"p"},"libra move run-script"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Arguments via CLI"',title:'"Arguments',via:!0,'CLI"':!0},'libra move run-script \\\n    --compiled-script-path build/CliArgs/bytecode_scripts/set_vals.mv \\\n    --type-args \\\n        0x1::account::Account \\\n        0x1::chain_id::ChainId \\\n    --args \\\n        u8:123 \\\n        "u8:[122, 123, 124, 125]" \\\n        address:"0xace" \\\n    --private-key-file ace.key \\\n    --assume-yes\n')),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "Result": {\n    "transaction_hash": "0x1d644eba8187843cc43919469112339bc2c435a49a733ac813b7bc6c79770152",\n    "gas_used": 3,\n    "gas_unit_price": 100,\n    "sender": "acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46",\n    "sequence_number": 3,\n    "success": true,\n    "timestamp_us": 1685078415935612,\n    "version": 528426413,\n    "vm_status": "Executed successfully"\n  }\n}\n'))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Arguments via JSON file"',title:'"Arguments',via:!0,JSON:!0,'file"':!0},"libra move run-script \\\n    --compiled-script-path build/CliArgs/bytecode_scripts/set_vals.mv \\\n    --json-file script_function_arguments.json \\\n    --private-key-file ace.key \\\n    --assume-yes\n")),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "Result": {\n    "transaction_hash": "0x840e2d6a5ab80d5a570effb3665f775f1755e0fd8d76e52bfa7241aaade883d7",\n    "gas_used": 3,\n    "gas_unit_price": 100,\n    "sender": "acef1b9b7d4ab208b99fed60746d18dcd74865edb7eb3c3f1428233988e4ba46",\n    "sequence_number": 4,\n    "success": true,\n    "timestamp_us": 1685078516832128,\n    "version": 528427132,\n    "vm_status": "Executed successfully"\n  }\n}\n'))),(0,s.kt)("p",null,"Both such script function invocations result in the following ",(0,s.kt)("inlineCode",{parentName:"p"},"reveal()")," view function output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="View function call"',title:'"View',function:!0,'call"':!0},"libra move view \\\n    --function-id $ace_addr::cli_args::reveal \\\n    --type-args \\\n        0x1::account::Account \\\n        0x1::chain_id::ChainId \\\n    --args address:$ace_addr\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="View function output"',title:'"View',function:!0,'output"':!0},'{\n  "Result": [\n    {\n      "address_vec_vec": [\n        [\n          "0xace"\n        ]\n      ],\n      "bool_vec": [\n        false,\n        false,\n        true,\n        true\n      ],\n      "type_info_1_match": true,\n      "type_info_2_match": true,\n      "u8_solo": 123\n    }\n  ]\n}\n')),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"As of the time of this writing, the ",(0,s.kt)("inlineCode",{parentName:"p"},"libra")," CLI only supports script function arguments for vectors of type ",(0,s.kt)("inlineCode",{parentName:"p"},"u8"),", and only up to a vector depth of 1. Hence ",(0,s.kt)("inlineCode",{parentName:"p"},"vector<address>")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"vector<vector<u8>>")," are invalid script function argument types.")))}p.isMDXComponent=!0}}]);