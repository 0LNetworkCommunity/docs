"use strict";(self.webpackChunkopen_libra_core_docs=self.webpackChunkopen_libra_core_docs||[]).push([[1002],{1502:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=r(5893),o=r(1151);const i={},s="Libra Move Dev Quick Start",l={id:"core-devs/dev-quick-start",title:"Libra Move Dev Quick Start",description:"Quick Start",source:"@site/docs/core-devs/dev-quick-start.md",sourceDirName:"core-devs",slug:"/core-devs/dev-quick-start",permalink:"/core-devs/dev-quick-start",draft:!1,unlisted:!1,editUrl:"https://github.com/0LNetworkCommunity/documentation/edit/main/docs/core-devs/dev-quick-start.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Deploy",permalink:"/core-devs/testnet-deploy"},next:{title:"Move Formal Verification",permalink:"/core-devs/formal-verification"}},a={},c=[{value:"Quick Start",id:"quick-start",level:2},{value:"You must install <code>libra</code> cli tool to your PATH.",id:"you-must-install-libra-cli-tool-to-your-path",level:3},{value:"Run some tests",id:"run-some-tests",level:3},{value:"Running Move unit tests",id:"running-move-unit-tests",level:2},{value:"Build a libra framework release for smoke tests (head.mrb)",id:"build-a-libra-framework-release-for-smoke-tests-headmrb",level:2},{value:"Running smoke tests",id:"running-smoke-tests",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"libra-move-dev-quick-start",children:"Libra Move Dev Quick Start"})}),"\n",(0,n.jsx)(t.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,n.jsxs)(t.h3,{id:"you-must-install-libra-cli-tool-to-your-path",children:["You must install ",(0,n.jsx)(t.code,{children:"libra"})," cli tool to your PATH."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"# in this repo\ncargo build --release -p libra\n\n# copy to a dir in your PATH,\n# e.g. the $HOME/cargo/bin directory assuming it's added to your $PATH.\n\ncp ./target/release/libra ~/.cargo/bin\n# you may need to make it executable\nchmod +x ~/.cargo/bin/libra\n"})}),"\n",(0,n.jsx)(t.h3,{id:"run-some-tests",children:"Run some tests"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'\n# run framework tests with\ncd ./framework/libra-framework\nlibra move framework test\n\n# run formal verification with\nlibra move framework prove\n\n# run smoke tests (using cargo)\n# note the env variables, which you can add to your $HOME/.bashrc, or $HOME/.zshrc\n\ncd ./smoke-tests\nexport RUST_MIN_STACK=104857600\nexport DIEM_FORGE_NODE_BIN_PATH="$HOME/.cargo/bin/libra"\ncargo test\n'})}),"\n",(0,n.jsx)(t.h1,{id:"test-suites",children:"TEST SUITES"}),"\n",(0,n.jsx)(t.h2,{id:"running-move-unit-tests",children:"Running Move unit tests"}),"\n",(0,n.jsx)(t.p,{children:"Change into a Move project dir (i.e., the directory with a Move.toml)."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"libra move test"})}),"\n",(0,n.jsx)(t.p,{children:"optionally with filters:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"libra move test -f <test name>"})}),"\n",(0,n.jsx)(t.h2,{id:"build-a-libra-framework-release-for-smoke-tests-headmrb",children:"Build a libra framework release for smoke tests (head.mrb)"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"cd ./framework\nlibra move release\n\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Your release will be in ",(0,n.jsx)(t.code,{children:"./releases/head.mrb"}),", you will need this for genesis and smoketests."]}),"\n",(0,n.jsx)(t.p,{children:"Note for smoke tests: you must regenerate the .mrb file EVERYTIME YOU MAKE A CHANGE TO CORE MOVE CODE. Otherwise your tests will be against the old code"}),"\n",(0,n.jsx)(t.h2,{id:"running-smoke-tests",children:"Running smoke tests"}),"\n",(0,n.jsx)(t.p,{children:"Note: RUST_MIN_STACK needs to be set since there is an issue with the rust default stack size for tests which involve compiling, and then starting a local testnet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'cd ./smoke-tests\nexport RUST_MIN_STACK=104857600\nexport DIEM_FORGE_NODE_BIN_PATH="$HOME/.cargo/bin/libra"\ncargo test\n'})}),"\n",(0,n.jsx)(t.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,n.jsxs)(t.p,{children:["**Issue building ",(0,n.jsx)(t.code,{children:"libra"})," binary **"]}),"\n",(0,n.jsxs)(t.p,{children:["If you encounter the following error:\n",(0,n.jsx)(t.code,{children:"error[E0599]: no method named disable_lifo_slot found for mutable reference &mut tokio::runtime::Builder in the current scope"})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Solution"})}),"\n",(0,n.jsx)(t.p,{children:"You can resolve this issue by building with the following flag:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'RUSTFLAGS="--cfg tokio_unstable" cargo build --profile cli -p diem-node --target-dir ~/.cargo/bin\n'})}),"\n",(0,n.jsx)(t.p,{children:"This flag enables the unstable features required by the tokio runtime."})]})}function u(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,r)=>{r.d(t,{Z:()=>l,a:()=>s});var n=r(7294);const o={},i=n.createContext(o);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);